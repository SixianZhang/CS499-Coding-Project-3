% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NNetIterations.R
\name{NNetIterations}
\alias{NNetIterations}
\title{Neural Network algorithm using iterations.}
\usage{
NNetIterations(X.mat, y.vec, max.iterations, step.size, n.hidden.units,
  is.train)
}
\arguments{
\item{X.mat}{numeric feature matrix of size [n_observations x n_features].}

\item{y.vec}{numeric label vector of length n_observations.}

\item{max.iterations}{integer scalar greater than 1.}

\item{step.size}{numeric positive scalar.}

\item{n.hidden.units}{number of hidden units, greater than or equal to 1.}

\item{is.train}{logical vector of length n_observations, TRUE if the observation is for training, FALSE for validation}
}
\value{
result.list with named elements:
pred.mat, n_observations x max.iterations matrix of predicted values.
V.mat final weight matrix (n_features+1 x n.hidden.units).
w.vec final weight vector (n.hidden.units+1).
predict(testX.mat) a function that takes a test features matrix and returns a vector of predictions.
}
\description{
This neural network algorithm has one output and one hidden layer, and stops when max.iterations is reached.
}
\examples{
data(spam, package = "ElemStatLearn")
X.mat <- data.matrix(spam[,-ncol(spam)])
y.vec <- as.vector(ifelse(spam$spam == 'spam',1,0))
max.iteration <- 50L
step.size <- 0.02
n.hidden.units = 20L
temp <- sample(rep(1:2,l=length(y.vec)))
is.train <- (temp == 1)
result.list <- NNetIterations(X.mat, y.vec, max.iteration, step.size, n.hidden.units, is.train = is.train)
}
